Program {
    statements: [
        TypeAlias {
            modifiers: GeneralModifiers(
                [],
            ),
            name: "AType",
            generics: [
                DefinitionType {
                    name: "Generic1",
                    requires_implementations: [],
                },
                DefinitionType {
                    name: "Generic2",
                    requires_implementations: [],
                },
            ],
            definition: Regular(
                RegularType {
                    path: [],
                    name: "Generic1",
                    generics: [
                        Regular(
                            RegularType {
                                path: [],
                                name: "Generic2",
                                generics: [],
                                array: false,
                            },
                        ),
                    ],
                    array: true,
                },
            ),
        },
        TypeAlias {
            modifiers: GeneralModifiers(
                [],
            ),
            name: "Reg_T",
            generics: [],
            definition: Regular(
                RegularType {
                    path: [],
                    name: "int",
                    generics: [],
                    array: false,
                },
            ),
        },
        TypeAlias {
            modifiers: GeneralModifiers(
                [],
            ),
            name: "Reg_ArrayT",
            generics: [],
            definition: Regular(
                RegularType {
                    path: [],
                    name: "int",
                    generics: [],
                    array: true,
                },
            ),
        },
        TypeAlias {
            modifiers: GeneralModifiers(
                [],
            ),
            name: "Reg_GenericT",
            generics: [
                DefinitionType {
                    name: "A",
                    requires_implementations: [],
                },
            ],
            definition: Regular(
                RegularType {
                    path: [],
                    name: "A",
                    generics: [
                        Regular(
                            RegularType {
                                path: [],
                                name: "A",
                                generics: [],
                                array: false,
                            },
                        ),
                    ],
                    array: false,
                },
            ),
        },
        TypeAlias {
            modifiers: GeneralModifiers(
                [],
            ),
            name: "Reg_GenericArrayT",
            generics: [
                DefinitionType {
                    name: "B",
                    requires_implementations: [],
                },
            ],
            definition: Regular(
                RegularType {
                    path: [],
                    name: "B",
                    generics: [
                        Regular(
                            RegularType {
                                path: [],
                                name: "B",
                                generics: [],
                                array: false,
                            },
                        ),
                    ],
                    array: true,
                },
            ),
        },
        TypeAlias {
            modifiers: GeneralModifiers(
                [],
            ),
            name: "NormalTuple",
            generics: [],
            definition: Tuple(
                TupleType(
                    [
                        Regular(
                            RegularType {
                                path: [],
                                name: "int",
                                generics: [],
                                array: false,
                            },
                        ),
                        Regular(
                            RegularType {
                                path: [],
                                name: "float",
                                generics: [],
                                array: false,
                            },
                        ),
                        Regular(
                            RegularType {
                                path: [],
                                name: "bool",
                                generics: [],
                                array: false,
                            },
                        ),
                    ],
                ),
            ),
        },
        TypeAlias {
            modifiers: GeneralModifiers(
                [],
            ),
            name: "GenericTuple",
            generics: [
                DefinitionType {
                    name: "T",
                    requires_implementations: [],
                },
            ],
            definition: Tuple(
                TupleType(
                    [
                        Regular(
                            RegularType {
                                path: [],
                                name: "T",
                                generics: [],
                                array: false,
                            },
                        ),
                        Regular(
                            RegularType {
                                path: [],
                                name: "T",
                                generics: [],
                                array: false,
                            },
                        ),
                        Regular(
                            RegularType {
                                path: [],
                                name: "T",
                                generics: [],
                                array: false,
                            },
                        ),
                    ],
                ),
            ),
        },
        TypeAlias {
            modifiers: GeneralModifiers(
                [],
            ),
            name: "EmptyTuple",
            generics: [],
            definition: Tuple(
                TupleType(
                    [],
                ),
            ),
        },
        TypeAlias {
            modifiers: GeneralModifiers(
                [],
            ),
            name: "NestedTuples",
            generics: [],
            definition: Tuple(
                TupleType(
                    [
                        Tuple(
                            TupleType(
                                [
                                    Regular(
                                        RegularType {
                                            path: [],
                                            name: "int",
                                            generics: [],
                                            array: false,
                                        },
                                    ),
                                    Regular(
                                        RegularType {
                                            path: [],
                                            name: "int",
                                            generics: [],
                                            array: false,
                                        },
                                    ),
                                ],
                            ),
                        ),
                        Tuple(
                            TupleType(
                                [
                                    Regular(
                                        RegularType {
                                            path: [],
                                            name: "float",
                                            generics: [],
                                            array: false,
                                        },
                                    ),
                                    Regular(
                                        RegularType {
                                            path: [],
                                            name: "float",
                                            generics: [],
                                            array: false,
                                        },
                                    ),
                                ],
                            ),
                        ),
                        Regular(
                            RegularType {
                                path: [],
                                name: "bool",
                                generics: [],
                                array: false,
                            },
                        ),
                    ],
                ),
            ),
        },
        FunctionDefinition(
            Function {
                prototype: FunctionPrototype {
                    modifiers: GeneralModifiers(
                        [],
                    ),
                    name: "_",
                    generics: [
                        DefinitionType {
                            name: "Generic2",
                            requires_implementations: [],
                        },
                    ],
                    arguments: [],
                    return_type: Some(
                        Regular(
                            RegularType {
                                path: [],
                                name: "AType",
                                generics: [
                                    Regular(
                                        RegularType {
                                            path: [],
                                            name: "int",
                                            generics: [],
                                            array: false,
                                        },
                                    ),
                                    Regular(
                                        RegularType {
                                            path: [],
                                            name: "Generic2",
                                            generics: [],
                                            array: false,
                                        },
                                    ),
                                ],
                                array: false,
                            },
                        ),
                    ),
                },
                body: Some(
                    [
                        Return(
                            Some(
                                Array(
                                    [
                                        Integer(
                                            5,
                                        ),
                                    ],
                                ),
                            ),
                        ),
                    ],
                ),
            },
        ),
        FunctionDefinition(
            Function {
                prototype: FunctionPrototype {
                    modifiers: GeneralModifiers(
                        [],
                    ),
                    name: "cast",
                    generics: [
                        DefinitionType {
                            name: "From",
                            requires_implementations: [],
                        },
                        DefinitionType {
                            name: "To",
                            requires_implementations: [],
                        },
                    ],
                    arguments: [
                        FunctionArgument {
                            name: "input",
                            kind: Regular(
                                RegularType {
                                    path: [],
                                    name: "From",
                                    generics: [],
                                    array: false,
                                },
                            ),
                        },
                    ],
                    return_type: Some(
                        Regular(
                            RegularType {
                                path: [],
                                name: "To",
                                generics: [],
                                array: false,
                            },
                        ),
                    ),
                },
                body: Some(
                    [
                        Return(
                            Some(
                                TypeCast {
                                    value: Identifier(
                                        "input",
                                    ),
                                    kind: Regular(
                                        RegularType {
                                            path: [],
                                            name: "To",
                                            generics: [],
                                            array: false,
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                ),
            },
        ),
        VariableDefinition {
            modifiers: GeneralModifiers(
                [],
            ),
            name: "long_cast",
            kind: None,
            value: TypeCast {
                value: TypeCast {
                    value: TypeCast {
                        value: TypeCast {
                            value: TypeCast {
                                value: TypeCast {
                                    value: TypeCast {
                                        value: Integer(
                                            3,
                                        ),
                                        kind: Regular(
                                            RegularType {
                                                path: [],
                                                name: "a",
                                                generics: [],
                                                array: false,
                                            },
                                        ),
                                    },
                                    kind: Regular(
                                        RegularType {
                                            path: [],
                                            name: "b",
                                            generics: [],
                                            array: false,
                                        },
                                    ),
                                },
                                kind: Regular(
                                    RegularType {
                                        path: [],
                                        name: "c",
                                        generics: [],
                                        array: false,
                                    },
                                ),
                            },
                            kind: Regular(
                                RegularType {
                                    path: [],
                                    name: "d",
                                    generics: [],
                                    array: false,
                                },
                            ),
                        },
                        kind: Regular(
                            RegularType {
                                path: [],
                                name: "e",
                                generics: [],
                                array: false,
                            },
                        ),
                    },
                    kind: Regular(
                        RegularType {
                            path: [],
                            name: "f",
                            generics: [],
                            array: false,
                        },
                    ),
                },
                kind: Regular(
                    RegularType {
                        path: [],
                        name: "g",
                        generics: [],
                        array: false,
                    },
                ),
            },
        },
        Return(
            Some(
                FunctionCall {
                    callee: Identifier(
                        "cast",
                    ),
                    generics: [
                        Regular(
                            RegularType {
                                path: [],
                                name: "int",
                                generics: [],
                                array: false,
                            },
                        ),
                        Regular(
                            RegularType {
                                path: [],
                                name: "float",
                                generics: [],
                                array: false,
                            },
                        ),
                    ],
                    arguments: [
                        Integer(
                            5,
                        ),
                    ],
                },
            ),
        ),
    ],
    module_info: None,
}