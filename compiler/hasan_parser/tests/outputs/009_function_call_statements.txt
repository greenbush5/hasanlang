Program {
    statements: [
        VariableAssign {
            name: Identifier(
                "a",
            ),
            value: Integer(
                5,
            ),
        },
        VariableAssign {
            name: DotAccess {
                expression: DotAccess {
                    expression: Identifier(
                        "a",
                    ),
                    accessor: Identifier(
                        "b",
                    ),
                },
                accessor: Identifier(
                    "c",
                ),
            },
            value: Integer(
                3,
            ),
        },
        VariableAssign {
            name: ColonAccess {
                expression: DotAccess {
                    expression: FunctionCall {
                        callee: DotAccess {
                            expression: Identifier(
                                "a",
                            ),
                            accessor: Identifier(
                                "b",
                            ),
                        },
                        generics: [],
                        arguments: [],
                    },
                    accessor: Identifier(
                        "d",
                    ),
                },
                accessor: Identifier(
                    "e",
                ),
            },
            value: FunctionCall {
                callee: ArrayAccess {
                    expression: FunctionCall {
                        callee: ArrayAccess {
                            expression: DotAccess {
                                expression: FunctionCall {
                                    callee: FunctionCall {
                                        callee: Identifier(
                                            "f",
                                        ),
                                        generics: [],
                                        arguments: [],
                                    },
                                    generics: [],
                                    arguments: [],
                                },
                                accessor: Identifier(
                                    "g",
                                ),
                            },
                            accessor: Identifier(
                                "h",
                            ),
                        },
                        generics: [],
                        arguments: [],
                    },
                    accessor: Identifier(
                        "i",
                    ),
                },
                generics: [],
                arguments: [],
            },
        },
        FunctionCall {
            callee: Identifier(
                "a",
            ),
            generics: [],
            arguments: [],
        },
        FunctionCall {
            callee: FunctionCall {
                callee: Identifier(
                    "a",
                ),
                generics: [
                    Regular(
                        RegularType {
                            name: "B",
                            generics: [],
                            array: true,
                        },
                    ),
                ],
                arguments: [
                    String(
                        "asd",
                    ),
                ],
            },
            generics: [
                Regular(
                    RegularType {
                        name: "A",
                        generics: [],
                        array: false,
                    },
                ),
            ],
            arguments: [
                Integer(
                    1,
                ),
            ],
        },
    ],
    module_info: None,
}