program = { SOI ~ statement* ~ EOI }
statement = _{ function_definition_stmt | type_definition_stmt | class_definition | class_declaration | variable_definition_stmt | function_call_stmt | return_stmt }

stmt_sep = _{ ";" }

//* functions *//
function_header = { "func" ~ identifier ~ definition_generics? ~ "(" ~ function_definition_arguments? ~ ")" ~ ("->" ~ type)? }

function_definition_argument = { identifier ~ ":" ~ type }
function_definition_arguments = { function_definition_argument ~ ("," ~ function_definition_argument)* }
function_call_arguments = { expression ~ ("," ~ expression)* ~ ","? }

block = { "do" ~ statement* ~ "end" ~ stmt_sep? }

//* class declaration *//
class_declaration = { "declare"? ~ "class" ~ identifier ~ definition_generics? ~ class_declaration_member* ~ "end" ~ stmt_sep? }
class_declaration_member = { class_declaration_function | class_declaration_variable }

class_declaration_function = { attributes? ~ function_header ~ stmt_sep }
class_declaration_variable = { identifier ~ ":" ~ type ~ stmt_sep }

//* class definition *//
class_definition = { "class" ~ identifier ~ definition_generics? ~ class_definition_member* ~ "end" ~ stmt_sep? }
class_definition_member = { class_definition_function | class_definition_variable }

class_definition_function = { attributes? ~ function_definition_stmt ~ stmt_sep? }
class_definition_variable = { identifier ~ ":" ~ type ~ ("=" ~ expression)? ~ stmt_sep }

// general class stuff //
attributes = { "#[" ~ attribute_identifier ~ ("," ~ attribute_identifier)* ~ "]" }
attribute_identifier = { "constructor" | "private" | "public" | "get" | "set" | "static" }

//* types *//
type = { raw_type | array_type | base_type }

base_type = _{ identifier ~ definition_generics? }
array_type = { base_type ~ ("[" ~ "]")+ }
raw_type = { (array_type | base_type) ~ "!" }

definition_generics = { "<" ~ identifier ~ ("," ~ identifier)* ~ ">" }
call_generics = { "<" ~ type ~ ("," ~ type)* ~ ">" }

//* expressions *//
expression = { unary_expression | binary_expression | array_expression | recursive_expression | term }
operator = { "+" | "-" | "/" | "*" | "%" }
unary_operator = { "-" }

// general expression stuff //
unary_expression = { unary_operator ~ term }
binary_expression = { term ~ (operator ~ term)+ }
array_expression = { "[" ~ (expression ~ ("," ~ expression)*)? ~ "]" }

// terms //
term = _{ unary_expression | array_expression | recursive_expression | term_without_recursion }
term_without_recursion = _{ literal | identifier | "(" ~ expression ~ ")" }

// recursive expressions //
recursive_operator = _{ recursive_call | recursive_array | recursive_dot | recursive_arrow | recursive_as }
	recursive_call = { call_generics? ~ "(" ~ function_call_arguments? ~ ")" }
	recursive_array = { "[" ~ expression ~ "]" }
	recursive_dot = { "." ~ identifier }
	recursive_arrow = { "->" ~ identifier }
	recursive_as = { "as" ~ type }

recursive_expression = { term_without_recursion ~ recursive_operator+ }

//* literals and identifiers *//
literal = _{ string_literal | number_literal }
string_literal = { "\"" ~ (!("\"") ~ ANY)* ~ "\"" }
number_literal = @{ ("-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ~ ("." ~ ASCII_DIGIT+)?) | "0" }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

//* statements *//
variable_definition_stmt = { "var" ~ identifier ~ (":" ~ type)? ~ "=" ~ expression ~ stmt_sep }
function_definition_stmt = { function_header ~ block }
type_definition_stmt = { "type" ~ identifier ~ definition_generics? ~ "=" ~ type ~ stmt_sep }
function_call_stmt = { term_without_recursion ~ recursive_call ~ stmt_sep }
return_stmt = { "return" ~ expression? ~ stmt_sep }

//* to be ignored *//
line_comment = _{ "//" ~ (!"\n" ~ ANY)* ~ ("\n" | EOI) }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

COMMENT = _{ line_comment | block_comment }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }