type AType<Generic1, Generic2> = Generic1<Generic2>[];

type Reg_T = int;
type Reg_ArrayT = int[];
type Reg_GenericT<A> = A<A>;
type Reg_GenericArrayT<B> = B<B>[];

type Raw_T = int!;
type Raw_ArrayT = int![];
type Raw_GenericT<A> = A!<A>;
type Raw_GenericArrayT<B> = B!<B>[];

// This isn't supposed to make sense
func asd<Generic2>() -> AType<int, Generic2> do
	return [5];
end