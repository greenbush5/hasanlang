Program {
    statements: [
        VariableDefinition {
            modifiers: [],
            name: "a",
            kind: None,
            value: Unary {
                operator: Not,
                operand: Boolean(
                    true,
                ),
            },
        },
        VariableDefinition {
            modifiers: [],
            name: "b",
            kind: None,
            value: Binary {
                lhs: Binary {
                    lhs: Int(
                        2,
                    ),
                    operator: Plus,
                    rhs: Binary {
                        lhs: Int(
                            2,
                        ),
                        operator: Times,
                        rhs: Int(
                            5,
                        ),
                    },
                },
                operator: NotEquals,
                rhs: Int(
                    5,
                ),
            },
        },
        If {
            condition: Binary {
                lhs: Boolean(
                    true,
                ),
                operator: Equals,
                rhs: Boolean(
                    true,
                ),
            },
            statements: [
                FunctionCall {
                    callee: Identifier(
                        "print",
                    ),
                    generics: [],
                    arguments: [
                        String(
                            "asdasd",
                        ),
                    ],
                },
                VariableAssign {
                    name: Identifier(
                        "a",
                    ),
                    value: Boolean(
                        false,
                    ),
                },
            ],
            elseif_branches: [
                ConditionBranch {
                    condition: Binary {
                        lhs: Boolean(
                            false,
                        ),
                        operator: NotEquals,
                        rhs: Boolean(
                            true,
                        ),
                    },
                    statements: [
                        FunctionCall {
                            callee: Identifier(
                                "do_something",
                            ),
                            generics: [],
                            arguments: [],
                        },
                    ],
                },
                ConditionBranch {
                    condition: Binary {
                        lhs: Boolean(
                            false,
                        ),
                        operator: Or,
                        rhs: Boolean(
                            true,
                        ),
                    },
                    statements: [
                        Return(
                            Int(
                                5,
                            ),
                        ),
                    ],
                },
            ],
            else_branch: Some(
                ConditionBranch {
                    condition: Empty,
                    statements: [],
                },
            ),
        },
        If {
            condition: Binary {
                lhs: Boolean(
                    true,
                ),
                operator: Equals,
                rhs: Boolean(
                    true,
                ),
            },
            statements: [
                FunctionCall {
                    callee: Identifier(
                        "print",
                    ),
                    generics: [],
                    arguments: [
                        String(
                            "asdasd",
                        ),
                    ],
                },
                VariableAssign {
                    name: Identifier(
                        "a",
                    ),
                    value: Boolean(
                        false,
                    ),
                },
            ],
            elseif_branches: [
                ConditionBranch {
                    condition: Binary {
                        lhs: Boolean(
                            false,
                        ),
                        operator: NotEquals,
                        rhs: Boolean(
                            true,
                        ),
                    },
                    statements: [
                        FunctionCall {
                            callee: Identifier(
                                "do_something",
                            ),
                            generics: [],
                            arguments: [],
                        },
                    ],
                },
                ConditionBranch {
                    condition: Binary {
                        lhs: Boolean(
                            false,
                        ),
                        operator: Or,
                        rhs: Boolean(
                            true,
                        ),
                    },
                    statements: [
                        Return(
                            Int(
                                5,
                            ),
                        ),
                    ],
                },
            ],
            else_branch: Some(
                ConditionBranch {
                    condition: Empty,
                    statements: [],
                },
            ),
        },
    ],
    module_info: None,
}