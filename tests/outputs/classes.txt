Program {
    statements: [
        ClassDefinition {
            modifiers: [],
            name: "ClassDefinition",
            generics: [],
            members: [
                Variable {
                    modifiers: [
                        Public,
                    ],
                    name: "a",
                    kind: Regular(
                        RegularType {
                            base: Identifier(
                                "int",
                            ),
                            generics: [],
                            raw: false,
                            array: true,
                        },
                    ),
                    default_value: String(
                        "default value",
                    ),
                },
                Variable {
                    modifiers: [
                        Public,
                    ],
                    name: "b",
                    kind: Regular(
                        RegularType {
                            base: Identifier(
                                "SomeType",
                            ),
                            generics: [
                                DefinitionType {
                                    name: "int",
                                    requires_implementations: [],
                                },
                            ],
                            raw: false,
                            array: true,
                        },
                    ),
                    default_value: Empty,
                },
                Function {
                    attributes: Some(
                        [
                            Constructor,
                        ],
                    ),
                    modifiers: [
                        Static,
                    ],
                    name: "some_function",
                    generics: [],
                    arguments: [],
                    return_type: Some(
                        Regular(
                            RegularType {
                                base: Identifier(
                                    "bool",
                                ),
                                generics: [],
                                raw: false,
                                array: false,
                            },
                        ),
                    ),
                    statements: [],
                },
                Variable {
                    modifiers: [],
                    name: "c",
                    kind: Regular(
                        RegularType {
                            base: Identifier(
                                "bool",
                            ),
                            generics: [],
                            raw: false,
                            array: false,
                        },
                    ),
                    default_value: Empty,
                },
                Function {
                    attributes: None,
                    modifiers: [],
                    name: "another_function",
                    generics: [],
                    arguments: [],
                    return_type: Some(
                        Regular(
                            RegularType {
                                base: Identifier(
                                    "int",
                                ),
                                generics: [],
                                raw: false,
                                array: false,
                            },
                        ),
                    ),
                    statements: [],
                },
            ],
        },
        ClassDefinition {
            modifiers: [
                Public,
            ],
            name: "ClassDeclaraction",
            generics: [],
            members: [
                Variable {
                    modifiers: [],
                    name: "a",
                    kind: Regular(
                        RegularType {
                            base: Identifier(
                                "int",
                            ),
                            generics: [],
                            raw: false,
                            array: false,
                        },
                    ),
                    default_value: Empty,
                },
                Function {
                    attributes: Some(
                        [
                            Constructor,
                        ],
                    ),
                    modifiers: [],
                    name: "some_function",
                    generics: [],
                    arguments: [],
                    return_type: Some(
                        Regular(
                            RegularType {
                                base: Identifier(
                                    "bool",
                                ),
                                generics: [],
                                raw: false,
                                array: false,
                            },
                        ),
                    ),
                    statements: [],
                },
                Function {
                    attributes: None,
                    modifiers: [
                        Public,
                    ],
                    name: "other_function",
                    generics: [],
                    arguments: [],
                    return_type: Some(
                        Regular(
                            RegularType {
                                base: Identifier(
                                    "int",
                                ),
                                generics: [],
                                raw: false,
                                array: false,
                            },
                        ),
                    ),
                    statements: [],
                },
            ],
        },
        ClassDefinition {
            modifiers: [
                Static,
            ],
            name: "Array",
            generics: [
                DefinitionType {
                    name: "T",
                    requires_implementations: [],
                },
            ],
            members: [
                Function {
                    attributes: Some(
                        [
                            Get,
                        ],
                    ),
                    modifiers: [],
                    name: "length",
                    generics: [],
                    arguments: [],
                    return_type: Some(
                        Regular(
                            RegularType {
                                base: Identifier(
                                    "int",
                                ),
                                generics: [],
                                raw: false,
                                array: false,
                            },
                        ),
                    ),
                    statements: [],
                },
                Function {
                    attributes: None,
                    modifiers: [
                        Static,
                    ],
                    name: "append",
                    generics: [],
                    arguments: [
                        FunctionArgument {
                            name: "_elem",
                            kind: Regular(
                                RegularType {
                                    base: Identifier(
                                        "T",
                                    ),
                                    generics: [],
                                    raw: false,
                                    array: false,
                                },
                            ),
                        },
                    ],
                    return_type: Some(
                        Regular(
                            RegularType {
                                base: Identifier(
                                    "void",
                                ),
                                generics: [],
                                raw: false,
                                array: false,
                            },
                        ),
                    ),
                    statements: [],
                },
                Function {
                    attributes: None,
                    modifiers: [],
                    name: "copy",
                    generics: [],
                    arguments: [],
                    return_type: Some(
                        Regular(
                            RegularType {
                                base: Identifier(
                                    "this",
                                ),
                                generics: [],
                                raw: false,
                                array: false,
                            },
                        ),
                    ),
                    statements: [],
                },
            ],
        },
        ClassDefinition {
            modifiers: [],
            name: "Array",
            generics: [
                DefinitionType {
                    name: "T",
                    requires_implementations: [],
                },
            ],
            members: [
                Function {
                    attributes: Some(
                        [
                            Get,
                        ],
                    ),
                    modifiers: [],
                    name: "length",
                    generics: [],
                    arguments: [],
                    return_type: Some(
                        Regular(
                            RegularType {
                                base: Identifier(
                                    "int",
                                ),
                                generics: [],
                                raw: false,
                                array: false,
                            },
                        ),
                    ),
                    statements: [],
                },
                Function {
                    attributes: None,
                    modifiers: [
                        Static,
                    ],
                    name: "append",
                    generics: [],
                    arguments: [
                        FunctionArgument {
                            name: "_elem",
                            kind: Regular(
                                RegularType {
                                    base: Identifier(
                                        "T",
                                    ),
                                    generics: [],
                                    raw: false,
                                    array: false,
                                },
                            ),
                        },
                    ],
                    return_type: Some(
                        Regular(
                            RegularType {
                                base: Identifier(
                                    "void",
                                ),
                                generics: [],
                                raw: false,
                                array: false,
                            },
                        ),
                    ),
                    statements: [],
                },
                Function {
                    attributes: None,
                    modifiers: [],
                    name: "copy",
                    generics: [],
                    arguments: [],
                    return_type: Some(
                        Regular(
                            RegularType {
                                base: Identifier(
                                    "this",
                                ),
                                generics: [],
                                raw: false,
                                array: false,
                            },
                        ),
                    ),
                    statements: [],
                },
            ],
        },
    ],
    module_info: None,
}