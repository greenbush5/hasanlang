Program {
    statements: [
        VariableDefinition {
            modifiers: [],
            name: "a",
            kind: None,
            value: Binary {
                lhs: Integer(
                    2,
                ),
                operator: Plus,
                rhs: Binary {
                    lhs: Integer(
                        2,
                    ),
                    operator: Times,
                    rhs: Integer(
                        2,
                    ),
                },
            },
        },
        VariableDefinition {
            modifiers: [],
            name: "b",
            kind: None,
            value: Binary {
                lhs: FunctionCall {
                    callee: Identifier(
                        "some_func",
                    ),
                    generics: [],
                    arguments: [],
                },
                operator: Plus,
                rhs: Binary {
                    lhs: Binary {
                        lhs: Integer(
                            2,
                        ),
                        operator: Divide,
                        rhs: Integer(
                            2,
                        ),
                    },
                    operator: Times,
                    rhs: Integer(
                        12312312,
                    ),
                },
            },
        },
        VariableDefinition {
            modifiers: [],
            name: "c",
            kind: None,
            value: Binary {
                lhs: Binary {
                    lhs: FunctionCall {
                        callee: FunctionCall {
                            callee: FunctionCall {
                                callee: FunctionCall {
                                    callee: FunctionCall {
                                        callee: FunctionCall {
                                            callee: Identifier(
                                                "other_func",
                                            ),
                                            generics: [],
                                            arguments: [],
                                        },
                                        generics: [],
                                        arguments: [],
                                    },
                                    generics: [],
                                    arguments: [],
                                },
                                generics: [],
                                arguments: [],
                            },
                            generics: [],
                            arguments: [],
                        },
                        generics: [],
                        arguments: [],
                    },
                    operator: Plus,
                    rhs: Binary {
                        lhs: Integer(
                            1337,
                        ),
                        operator: Times,
                        rhs: Integer(
                            3232892,
                        ),
                    },
                },
                operator: Minus,
                rhs: Integer(
                    1,
                ),
            },
        },
        VariableDefinition {
            modifiers: [],
            name: "d",
            kind: None,
            value: Binary {
                lhs: Binary {
                    lhs: ArrayAccess {
                        expression: ArrayAccess {
                            expression: ArrayAccess {
                                expression: ArrayAccess {
                                    expression: ArrayAccess {
                                        expression: ArrayAccess {
                                            expression: Identifier(
                                                "array",
                                            ),
                                            accessor: Integer(
                                                0,
                                            ),
                                        },
                                        accessor: Integer(
                                            1,
                                        ),
                                    },
                                    accessor: Integer(
                                        2,
                                    ),
                                },
                                accessor: Integer(
                                    3,
                                ),
                            },
                            accessor: Integer(
                                4,
                            ),
                        },
                        accessor: Integer(
                            5,
                        ),
                    },
                    operator: Minus,
                    rhs: Integer(
                        1,
                    ),
                },
                operator: Plus,
                rhs: FunctionCall {
                    callee: Identifier(
                        "another_function",
                    ),
                    generics: [],
                    arguments: [],
                },
            },
        },
        VariableDefinition {
            modifiers: [],
            name: "e",
            kind: None,
            value: ArrayAccess {
                expression: FunctionCall {
                    callee: FunctionCall {
                        callee: ArrayAccess {
                            expression: Identifier(
                                "array",
                            ),
                            accessor: Integer(
                                0,
                            ),
                        },
                        generics: [],
                        arguments: [
                            Binary {
                                lhs: String(
                                    "hello, world!",
                                ),
                                operator: Plus,
                                rhs: String(
                                    "!",
                                ),
                            },
                        ],
                    },
                    generics: [],
                    arguments: [
                        String(
                            "asd",
                        ),
                    ],
                },
                accessor: Binary {
                    lhs: Integer(
                        4,
                    ),
                    operator: Minus,
                    rhs: Integer(
                        2,
                    ),
                },
            },
        },
        VariableDefinition {
            modifiers: [],
            name: "f",
            kind: None,
            value: Binary {
                lhs: ArrowAccess {
                    expression: Identifier(
                        "some_class",
                    ),
                    accessor: Identifier(
                        "some_property",
                    ),
                },
                operator: Plus,
                rhs: FunctionCall {
                    callee: ArrowAccess {
                        expression: Identifier(
                            "some_class",
                        ),
                        accessor: Identifier(
                            "some_function",
                        ),
                    },
                    generics: [],
                    arguments: [],
                },
            },
        },
        VariableDefinition {
            modifiers: [],
            name: "e",
            kind: None,
            value: Binary {
                lhs: DotAccess {
                    expression: Identifier(
                        "something",
                    ),
                    accessor: Identifier(
                        "something_else",
                    ),
                },
                operator: Divide,
                rhs: FunctionCall {
                    callee: DotAccess {
                        expression: Identifier(
                            "something",
                        ),
                        accessor: Identifier(
                            "something_more",
                        ),
                    },
                    generics: [],
                    arguments: [],
                },
            },
        },
        VariableDefinition {
            modifiers: [],
            name: "type_cast",
            kind: None,
            value: TypeCast {
                value: TypeCast {
                    value: TypeCast {
                        value: TypeCast {
                            value: TypeCast {
                                value: TypeCast {
                                    value: TypeCast {
                                        value: Integer(
                                            3,
                                        ),
                                        kind: Regular(
                                            RegularType {
                                                name: "a",
                                                generics: [],
                                                array: false,
                                            },
                                        ),
                                    },
                                    kind: Regular(
                                        RegularType {
                                            name: "b",
                                            generics: [],
                                            array: false,
                                        },
                                    ),
                                },
                                kind: Regular(
                                    RegularType {
                                        name: "c",
                                        generics: [],
                                        array: false,
                                    },
                                ),
                            },
                            kind: Regular(
                                RegularType {
                                    name: "d",
                                    generics: [],
                                    array: false,
                                },
                            ),
                        },
                        kind: Regular(
                            RegularType {
                                name: "e",
                                generics: [],
                                array: false,
                            },
                        ),
                    },
                    kind: Regular(
                        RegularType {
                            name: "f",
                            generics: [],
                            array: false,
                        },
                    ),
                },
                kind: Regular(
                    RegularType {
                        name: "g",
                        generics: [],
                        array: false,
                    },
                ),
            },
        },
        FunctionCall {
            callee: Identifier(
                "world",
            ),
            generics: [],
            arguments: [
                Integer(
                    123,
                ),
            ],
        },
        VariableDefinition {
            modifiers: [],
            name: "arr",
            kind: None,
            value: FunctionCall {
                callee: DotAccess {
                    expression: Identifier(
                        "Array",
                    ),
                    accessor: Identifier(
                        "new",
                    ),
                },
                generics: [],
                arguments: [],
            },
        },
        VariableDefinition {
            modifiers: [],
            name: "var1",
            kind: None,
            value: Identifier(
                "random_variable_name",
            ),
        },
        VariableDefinition {
            modifiers: [],
            name: "var2",
            kind: None,
            value: Binary {
                lhs: Integer(
                    2,
                ),
                operator: Plus,
                rhs: Integer(
                    5,
                ),
            },
        },
        VariableDefinition {
            modifiers: [],
            name: "complex_expression",
            kind: None,
            value: Binary {
                lhs: Binary {
                    lhs: Binary {
                        lhs: Binary {
                            lhs: Identifier(
                                "var2",
                            ),
                            operator: Times,
                            rhs: Integer(
                                15,
                            ),
                        },
                        operator: Divide,
                        rhs: Integer(
                            3,
                        ),
                    },
                    operator: Plus,
                    rhs: Binary {
                        lhs: FunctionCall {
                            callee: DotAccess {
                                expression: ArrayAccess {
                                    expression: Identifier(
                                        "a",
                                    ),
                                    accessor: Integer(
                                        0,
                                    ),
                                },
                                accessor: Identifier(
                                    "function",
                                ),
                            },
                            generics: [],
                            arguments: [
                                Integer(
                                    1,
                                ),
                                Integer(
                                    2,
                                ),
                                Integer(
                                    3,
                                ),
                                String(
                                    "random string",
                                ),
                                Array(
                                    [],
                                ),
                            ],
                        },
                        operator: Times,
                        rhs: FunctionCall {
                            callee: DotAccess {
                                expression: ArrowAccess {
                                    expression: ArrowAccess {
                                        expression: ArrayAccess {
                                            expression: ArrayAccess {
                                                expression: Identifier(
                                                    "a",
                                                ),
                                                accessor: Integer(
                                                    0,
                                                ),
                                            },
                                            accessor: Integer(
                                                1,
                                            ),
                                        },
                                        accessor: Identifier(
                                            "static_1",
                                        ),
                                    },
                                    accessor: Identifier(
                                        "static_2",
                                    ),
                                },
                                accessor: Identifier(
                                    "asd",
                                ),
                            },
                            generics: [],
                            arguments: [
                                Binary {
                                    lhs: Integer(
                                        123123123,
                                    ),
                                    operator: Times,
                                    rhs: Integer(
                                        2,
                                    ),
                                },
                                Array(
                                    [],
                                ),
                            ],
                        },
                    },
                },
                operator: Plus,
                rhs: Integer(
                    2,
                ),
            },
        },
        Return(
            Some(
                Array(
                    [
                        Identifier(
                            "complex_expression",
                        ),
                        Identifier(
                            "var2",
                        ),
                    ],
                ),
            ),
        ),
    ],
    module_info: None,
}