// Generic types
type AType<Generic1, Generic2> = Generic1<Generic2>[];

type Reg_T = int;
type Reg_ArrayT = int[];
type Reg_GenericT<A> = A<A>;
type Reg_GenericArrayT<B> = B<B>[];

// This isn't supposed to make sense
func _<Generic2>() -> AType<int, Generic2> do
	return [5];
end

// Type casts
func cast<From, To>(input: From) -> To do
	return input as To;
end

var long_cast = 3 as a as b as c as d as e as f as g;

return cast<int, float>(5);